trigger:
  branches:
    include:
      - master
      - develop

stages:
  - stage: validations_stage
    displayName: "Validations"
    condition: | 
      or(
        eq(variables['Build.Reason'], 'PullRequest'),
        and(
          ne(variables['Build.Reason'], 'PullRequest'),
          or(
            eq(variables['Build.SourceBranchName'], 'master'),
            eq(variables['Build.SourceBranchName'], 'develop')
          )
        )
      )
    jobs:
      - job: unit_test_and_sonar_cloud_job
        displayName: "Unit Tests and SonarCloud"
        pool:
          vmImage: ubuntu-20.04
          demands:
            - java
        steps:
          - checkout: self
            fetchDepth: null
          
          - task: gitversion/setup@0
            displayName: '[Setup] Install GitVersion'
            inputs:
              versionSpec: '5.8.x'

          - task: gitversion/execute@0
            displayName: '[Setup] Determine GitVersion'

          - script: |
              echo 'Exporting VERSION variable to another stages'
              VERSION_VALUE=$(GitVersion.SemVer)
              echo "The current version is $VERSION_VALUE"
              echo "##vso[task.setvariable variable=VERSION;isOutput=true]$VERSION_VALUE";
            name: gitversion
            displayName: "[Setup] Export GitVersion"

          - task: JavaToolInstaller@0
            displayName: "[Setup] Use JDK 17"
            inputs:
              versionSpec: 17
              jdkArchitectureOption: 'x64'
              jdkSourceOption: 'PreInstalled'

          - script: |
              sudo apt-get install xmlstarlet
            displayName: "[Setup] Install Package xmlstarlet"

          - script: |
              xmlstarlet edit -L --update '/_:project/_:version' --value '$(GitVersion.SemVer)' $(Build.SourcesDirectory)/pom.xml
            displayName: "[Setup] Update project version"

          - task: SonarCloudPrepare@1
            displayName: "[SonarCloud] Prepare"
            inputs:
              SonarCloud: 'SonarCloud'
              organization: portifoliogladson
              scannerMode: Other
              extraProperties: |
               # Additional properties that will be passed to the scanner,
               # Put one key=value per line, example:
               sonar.inclusions=**/*.java
               sonar.exclusions=src/test/*.java,src/main/resources/application.properties
               sonar.projectKey=portifolio.springboot-ci-example
               sonar.projectName=SpringBootCIExample
               sonar.coverage.jacoco.xmlReportPaths=**/jacoco.xml

          - task: Maven@3
            displayName: "[Test] Maven Test"
            inputs:
              mavenPomFile: 'pom.xml'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              codeCoverageToolOption: 'JaCoCo'
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false

          - task: Maven@3
            displayName: "[SonarCloud] Build and Analyze"
            inputs:
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              sonarQubeRunAnalysis: true
              isJacocoCoverageReportXML: true
              goals: 'package'

          - task: SonarCloudPublish@1
            displayName: '[SonarCloud] Publish'
            inputs:
              pollingTimeoutSec: '300'

          - task: sonarcloud-buildbreaker@2
            displayName: '[SonarCloud] Validate Quality Gate'
            inputs:
              SonarCloud: 'SonarCloud'
              organization: 'portifoliogladson'